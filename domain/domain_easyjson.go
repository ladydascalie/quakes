// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	models "github.com/ladydascalie/quakes/db/models"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3e1fa5ecDecodeGitlabComLadyDascalieEarthquakesDomain(in *jlexer.Lexer, out *Alert) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "magnitude":
			out.Magnitude = float64(in.Float64())
		case "place":
			out.Place = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "created_nano":
			out.CreatedNano = int64(in.Int64())
		case "lng":
			out.Lng = float64(in.Float64())
		case "lat":
			out.Lat = float64(in.Float64())
		case "depth":
			out.Depth = float64(in.Float64())
		case "affectedCities":
			if in.IsNull() {
				in.Skip()
				out.AffectedCities = nil
			} else {
				in.Delim('[')
				if out.AffectedCities == nil {
					if !in.IsDelim(']') {
						out.AffectedCities = make([]models.City, 0, 1)
					} else {
						out.AffectedCities = []models.City{}
					}
				} else {
					out.AffectedCities = (out.AffectedCities)[:0]
				}
				for !in.IsDelim(']') {
					var v1 models.City
					(v1).UnmarshalEasyJSON(in)
					out.AffectedCities = append(out.AffectedCities, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "open_street_map":
			out.OpenStreetMapURL = string(in.String())
		case "apple_maps":
			out.AppleMapsURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGitlabComLadyDascalieEarthquakesDomain(out *jwriter.Writer, in Alert) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"magnitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Magnitude))
	}
	{
		const prefix string = ",\"place\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Place))
	}
	{
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"created_nano\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CreatedNano))
	}
	{
		const prefix string = ",\"lng\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Lng))
	}
	{
		const prefix string = ",\"lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Lat))
	}
	{
		const prefix string = ",\"depth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Depth))
	}
	{
		const prefix string = ",\"affectedCities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AffectedCities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.AffectedCities {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"open_street_map\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OpenStreetMapURL))
	}
	{
		const prefix string = ",\"apple_maps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AppleMapsURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Alert) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGitlabComLadyDascalieEarthquakesDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Alert) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGitlabComLadyDascalieEarthquakesDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Alert) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGitlabComLadyDascalieEarthquakesDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Alert) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGitlabComLadyDascalieEarthquakesDomain(l, v)
}
